Line: """ Jacob Bejarano,  Wesly Barayuga
ERROR READING '"'
ERROR READING '"'
ERROR READING '"'
Jacob : INDENTIFIER
Bejarano : INDENTIFIER
ERROR READING ','
Wesly : INDENTIFIER
Barayuga : INDENTIFIER

Line:     Project Phase 1.1 - Scanner for Expressions
Project : INDENTIFIER
Phase : INDENTIFIER
1 : NUMBER
ERROR READING '.'
1 : NUMBER
- : SYMBOL
Scanner : INDENTIFIER
for : INDENTIFIER
Expressions : INDENTIFIER

Line:     02/10/23
2 : NUMBER
/ : SYMBOL
10 : NUMBER
/ : SYMBOL
23 : NUMBER

Line: """
ERROR READING '"'
ERROR READING '"'
ERROR READING '"'

Line: 

Line: from enum import Enum
from : INDENTIFIER
enum : INDENTIFIER
import : INDENTIFIER
Enum : INDENTIFIER

Line: import argparse
import : INDENTIFIER
argparse : INDENTIFIER

Line: import re
import : INDENTIFIER
re : INDENTIFIER

Line: 

Line: class TokenType(Enum):
class : INDENTIFIER
TokenType : INDENTIFIER
( : SYMBOL
Enum : INDENTIFIER
) : SYMBOL
: : SYMBOL

Line:     NUMBER = 1
NUMBER : INDENTIFIER
ERROR READING '='
1 : NUMBER

Line:     SYMBOL = 2
SYMBOL : INDENTIFIER
ERROR READING '='
2 : NUMBER

Line:     INDENTIFIER = 3
INDENTIFIER : INDENTIFIER
ERROR READING '='
3 : NUMBER

Line:     KEYWORD = 4
KEYWORD : INDENTIFIER
ERROR READING '='
4 : NUMBER

Line:     ERROR = 5
ERROR : INDENTIFIER
ERROR READING '='
5 : NUMBER

Line:     

Line:     def toString(type):
def : INDENTIFIER
toString : INDENTIFIER
( : SYMBOL
type : INDENTIFIER
) : SYMBOL
: : SYMBOL

Line:         match type:
match : INDENTIFIER
type : INDENTIFIER
: : SYMBOL

Line:             case TokenType.NUMBER:
case : INDENTIFIER
TokenType : INDENTIFIER
ERROR READING '.'
NUMBER : INDENTIFIER
: : SYMBOL

Line:                 return "NUMBER"
return : INDENTIFIER
ERROR READING '"'
NUMBER : INDENTIFIER
ERROR READING '"'

Line:             case TokenType.SYMBOL:
case : INDENTIFIER
TokenType : INDENTIFIER
ERROR READING '.'
SYMBOL : INDENTIFIER
: : SYMBOL

Line:                 return "SYMBOL"
return : INDENTIFIER
ERROR READING '"'
SYMBOL : INDENTIFIER
ERROR READING '"'

Line:             case TokenType.INDENTIFIER:
case : INDENTIFIER
TokenType : INDENTIFIER
ERROR READING '.'
INDENTIFIER : INDENTIFIER
: : SYMBOL

Line:                 return "INDENTIFIER"
return : INDENTIFIER
ERROR READING '"'
INDENTIFIER : INDENTIFIER
ERROR READING '"'

Line:             case TokenType.KEYWORD:
case : INDENTIFIER
TokenType : INDENTIFIER
ERROR READING '.'
KEYWORD : INDENTIFIER
: : SYMBOL

Line:                 return "KEYWORD"
return : INDENTIFIER
ERROR READING '"'
KEYWORD : INDENTIFIER
ERROR READING '"'

Line:             case TokenType.ERROR:
case : INDENTIFIER
TokenType : INDENTIFIER
ERROR READING '.'
ERROR : INDENTIFIER
: : SYMBOL

Line:                 return "ERROR"
return : INDENTIFIER
ERROR READING '"'
ERROR : INDENTIFIER
ERROR READING '"'

Line:         

Line:     

Line: class Token:
class : INDENTIFIER
Token : INDENTIFIER
: : SYMBOL

Line:     def __init__(self, type, value) -> None:
def : INDENTIFIER
ERROR READING '_'
ERROR READING '_'
init : INDENTIFIER
ERROR READING '_'
ERROR READING '_'
( : SYMBOL
self : INDENTIFIER
ERROR READING ','
type : INDENTIFIER
ERROR READING ','
value : INDENTIFIER
) : SYMBOL
- : SYMBOL
ERROR READING '>'
None : INDENTIFIER
: : SYMBOL

Line:        self.type = type
self : INDENTIFIER
ERROR READING '.'
type : INDENTIFIER
ERROR READING '='
type : INDENTIFIER

Line:        self.value = value  
self : INDENTIFIER
ERROR READING '.'
value : INDENTIFIER
ERROR READING '='
value : INDENTIFIER

Line:        

Line: 

Line: def ArgParser():
def : INDENTIFIER
ArgParser : INDENTIFIER
( : SYMBOL
) : SYMBOL
: : SYMBOL

Line:     """
ERROR READING '"'
ERROR READING '"'
ERROR READING '"'

Line:         Arugment Parser for the arguments passed from command line
Arugment : INDENTIFIER
Parser : INDENTIFIER
for : INDENTIFIER
the : INDENTIFIER
arguments : INDENTIFIER
passed : INDENTIFIER
from : INDENTIFIER
command : INDENTIFIER
line : INDENTIFIER

Line:         

Line:         @return: None
ERROR READING '@'
return : INDENTIFIER
: : SYMBOL
None : INDENTIFIER

Line:     """
ERROR READING '"'
ERROR READING '"'
ERROR READING '"'

Line:     argParser = argparse.ArgumentParser()
argParser : INDENTIFIER
ERROR READING '='
argparse : INDENTIFIER
ERROR READING '.'
ArgumentParser : INDENTIFIER
( : SYMBOL
) : SYMBOL

Line:     argParser.add_argument("-i", "--input", help="Input File")
argParser : INDENTIFIER
ERROR READING '.'
add : INDENTIFIER
ERROR READING '_'
argument : INDENTIFIER
( : SYMBOL
ERROR READING '"'
- : SYMBOL
i : INDENTIFIER
ERROR READING '"'
ERROR READING ','
ERROR READING '"'
- : SYMBOL
- : SYMBOL
input : INDENTIFIER
ERROR READING '"'
ERROR READING ','
help : INDENTIFIER
ERROR READING '='
ERROR READING '"'
Input : INDENTIFIER
File : INDENTIFIER
ERROR READING '"'
) : SYMBOL

Line:     argParser.add_argument("-o", "--output", help="Output File")
argParser : INDENTIFIER
ERROR READING '.'
add : INDENTIFIER
ERROR READING '_'
argument : INDENTIFIER
( : SYMBOL
ERROR READING '"'
- : SYMBOL
o : INDENTIFIER
ERROR READING '"'
ERROR READING ','
ERROR READING '"'
- : SYMBOL
- : SYMBOL
output : INDENTIFIER
ERROR READING '"'
ERROR READING ','
help : INDENTIFIER
ERROR READING '='
ERROR READING '"'
Output : INDENTIFIER
File : INDENTIFIER
ERROR READING '"'
) : SYMBOL

Line:     args = argParser.parse_args()
args : INDENTIFIER
ERROR READING '='
argParser : INDENTIFIER
ERROR READING '.'
parse : INDENTIFIER
ERROR READING '_'
args : INDENTIFIER
( : SYMBOL
) : SYMBOL

Line: 

Line:     input = open(args.input, "r")
input : INDENTIFIER
ERROR READING '='
open : INDENTIFIER
( : SYMBOL
args : INDENTIFIER
ERROR READING '.'
input : INDENTIFIER
ERROR READING ','
ERROR READING '"'
r : INDENTIFIER
ERROR READING '"'
) : SYMBOL

Line:     output = open(args.output, "a")
output : INDENTIFIER
ERROR READING '='
open : INDENTIFIER
( : SYMBOL
args : INDENTIFIER
ERROR READING '.'
output : INDENTIFIER
ERROR READING ','
ERROR READING '"'
a : INDENTIFIER
ERROR READING '"'
) : SYMBOL

Line:     

Line:     main(input, output)
main : INDENTIFIER
( : SYMBOL
input : INDENTIFIER
ERROR READING ','
output : INDENTIFIER
) : SYMBOL

Line: 

Line: 

Line: def keywordIndentifier(token):
def : INDENTIFIER
keywordIndentifier : INDENTIFIER
( : SYMBOL
token : INDENTIFIER
) : SYMBOL
: : SYMBOL

Line:     #TODO: implementation of keyword Indentifier
ERROR READING '#'
TODO : INDENTIFIER
: : SYMBOL
implementation : INDENTIFIER
of : INDENTIFIER
keyword : INDENTIFIER
Indentifier : INDENTIFIER

Line:     

Line:     # if token.value == keyword
ERROR READING '#'
if : INDENTIFIER
token : INDENTIFIER
ERROR READING '.'
value : INDENTIFIER
ERROR READING '='
ERROR READING '='
keyword : INDENTIFIER

Line:         # token.type == TokenType.KEYWORD
ERROR READING '#'
token : INDENTIFIER
ERROR READING '.'
type : INDENTIFIER
ERROR READING '='
ERROR READING '='
TokenType : INDENTIFIER
ERROR READING '.'
KEYWORD : INDENTIFIER

Line:     #return new Token
ERROR READING '#'
return : INDENTIFIER
new : INDENTIFIER
Token : INDENTIFIER

Line:     pass
pass : INDENTIFIER

Line: 

Line: def getTokens(line):
def : INDENTIFIER
getTokens : INDENTIFIER
( : SYMBOL
line : INDENTIFIER
) : SYMBOL
: : SYMBOL

Line:     if line.strip() == "":
if : INDENTIFIER
line : INDENTIFIER
ERROR READING '.'
strip : INDENTIFIER
( : SYMBOL
) : SYMBOL
ERROR READING '='
ERROR READING '='
ERROR READING '"'
ERROR READING '"'
: : SYMBOL

Line:         return []
return : INDENTIFIER
ERROR READING '['
ERROR READING ']'

Line:         

Line:     res = list()
res : INDENTIFIER
ERROR READING '='
list : INDENTIFIER
( : SYMBOL
) : SYMBOL

Line:     i = 0
i : INDENTIFIER
ERROR READING '='
0 : NUMBER

Line:     while i < len(line):
while : INDENTIFIER
i : INDENTIFIER
ERROR READING '<'
len : INDENTIFIER
( : SYMBOL
line : INDENTIFIER
) : SYMBOL
: : SYMBOL

Line:         

Line:         #If current char is whitespace or newline 
ERROR READING '#'
If : INDENTIFIER
current : INDENTIFIER
char : INDENTIFIER
is : INDENTIFIER
whitespace : INDENTIFIER
or : INDENTIFIER
newline : INDENTIFIER

Line:         if line[i] == " " or line[i] == "\n":
if : INDENTIFIER
line : INDENTIFIER
ERROR READING '['
i : INDENTIFIER
ERROR READING ']'
ERROR READING '='
ERROR READING '='
ERROR READING '"'
ERROR READING '"'
or : INDENTIFIER
line : INDENTIFIER
ERROR READING '['
i : INDENTIFIER
ERROR READING ']'
ERROR READING '='
ERROR READING '='
ERROR READING '"'
ERROR READING '\'
n : INDENTIFIER
ERROR READING '"'
: : SYMBOL

Line:             i += 1
i : INDENTIFIER
+ : SYMBOL
ERROR READING '='
1 : NUMBER

Line:             continue
continue : INDENTIFIER

Line:         

Line:         #intializing the token for now
ERROR READING '#'
intializing : INDENTIFIER
the : INDENTIFIER
token : INDENTIFIER
for : INDENTIFIER
now : INDENTIFIER

Line:         newToken = Token(TokenType.ERROR, None)
newToken : INDENTIFIER
ERROR READING '='
Token : INDENTIFIER
( : SYMBOL
TokenType : INDENTIFIER
ERROR READING '.'
ERROR : INDENTIFIER
ERROR READING ','
None : INDENTIFIER
) : SYMBOL

Line:         

Line:         if(re.match(r"[0-9]", line[i]) != None): # Numbers
if : INDENTIFIER
( : SYMBOL
re : INDENTIFIER
ERROR READING '.'
match : INDENTIFIER
( : SYMBOL
r : INDENTIFIER
ERROR READING '"'
ERROR READING '['
0 : NUMBER
- : SYMBOL
9 : NUMBER
ERROR READING ']'
ERROR READING '"'
ERROR READING ','
line : INDENTIFIER
ERROR READING '['
i : INDENTIFIER
ERROR READING ']'
) : SYMBOL
ERROR READING '!'
ERROR READING '='
None : INDENTIFIER
) : SYMBOL
: : SYMBOL
ERROR READING '#'
Numbers : INDENTIFIER

Line:             newToken.type = TokenType.NUMBER
newToken : INDENTIFIER
ERROR READING '.'
type : INDENTIFIER
ERROR READING '='
TokenType : INDENTIFIER
ERROR READING '.'
NUMBER : INDENTIFIER

Line:             newToken.value = 0
newToken : INDENTIFIER
ERROR READING '.'
value : INDENTIFIER
ERROR READING '='
0 : NUMBER

Line:             

Line:             while i < len(line) and re.match(r"[0-9]", line[i]) != None:
while : INDENTIFIER
i : INDENTIFIER
ERROR READING '<'
len : INDENTIFIER
( : SYMBOL
line : INDENTIFIER
) : SYMBOL
and : INDENTIFIER
re : INDENTIFIER
ERROR READING '.'
match : INDENTIFIER
( : SYMBOL
r : INDENTIFIER
ERROR READING '"'
ERROR READING '['
0 : NUMBER
- : SYMBOL
9 : NUMBER
ERROR READING ']'
ERROR READING '"'
ERROR READING ','
line : INDENTIFIER
ERROR READING '['
i : INDENTIFIER
ERROR READING ']'
) : SYMBOL
ERROR READING '!'
ERROR READING '='
None : INDENTIFIER
: : SYMBOL

Line:                 newToken.value = 10 * newToken.value + int(line[i]) 
newToken : INDENTIFIER
ERROR READING '.'
value : INDENTIFIER
ERROR READING '='
10 : NUMBER
* : SYMBOL
newToken : INDENTIFIER
ERROR READING '.'
value : INDENTIFIER
+ : SYMBOL
int : INDENTIFIER
( : SYMBOL
line : INDENTIFIER
ERROR READING '['
i : INDENTIFIER
ERROR READING ']'
) : SYMBOL

Line:                 i += 1
i : INDENTIFIER
+ : SYMBOL
ERROR READING '='
1 : NUMBER

Line:             # print(f"{newToken.value} : {newToken.type}")
ERROR READING '#'
print : INDENTIFIER
( : SYMBOL
f : INDENTIFIER
ERROR READING '"'
ERROR READING '{'
newToken : INDENTIFIER
ERROR READING '.'
value : INDENTIFIER
ERROR READING '}'
: : SYMBOL
ERROR READING '{'
newToken : INDENTIFIER
ERROR READING '.'
type : INDENTIFIER
ERROR READING '}'
ERROR READING '"'
) : SYMBOL

Line:             res.append(newToken)
res : INDENTIFIER
ERROR READING '.'
append : INDENTIFIER
( : SYMBOL
newToken : INDENTIFIER
) : SYMBOL

Line:             continue
continue : INDENTIFIER

Line:         elif(re.match(r"[a-zA-Z]", line[i]) != None): # Identifiers
elif : INDENTIFIER
( : SYMBOL
re : INDENTIFIER
ERROR READING '.'
match : INDENTIFIER
( : SYMBOL
r : INDENTIFIER
ERROR READING '"'
ERROR READING '['
a : INDENTIFIER
- : SYMBOL
zA : INDENTIFIER
- : SYMBOL
Z : INDENTIFIER
ERROR READING ']'
ERROR READING '"'
ERROR READING ','
line : INDENTIFIER
ERROR READING '['
i : INDENTIFIER
ERROR READING ']'
) : SYMBOL
ERROR READING '!'
ERROR READING '='
None : INDENTIFIER
) : SYMBOL
: : SYMBOL
ERROR READING '#'
Identifiers : INDENTIFIER

Line:             newToken.type = TokenType.INDENTIFIER
newToken : INDENTIFIER
ERROR READING '.'
type : INDENTIFIER
ERROR READING '='
TokenType : INDENTIFIER
ERROR READING '.'
INDENTIFIER : INDENTIFIER

Line:             newToken.value = ""
newToken : INDENTIFIER
ERROR READING '.'
value : INDENTIFIER
ERROR READING '='
ERROR READING '"'
ERROR READING '"'

Line:             

Line:             while i < len(line) and re.match(r"[a-zA-Z0-9]", line[i]) != None:
while : INDENTIFIER
i : INDENTIFIER
ERROR READING '<'
len : INDENTIFIER
( : SYMBOL
line : INDENTIFIER
) : SYMBOL
and : INDENTIFIER
re : INDENTIFIER
ERROR READING '.'
match : INDENTIFIER
( : SYMBOL
r : INDENTIFIER
ERROR READING '"'
ERROR READING '['
a : INDENTIFIER
- : SYMBOL
zA : INDENTIFIER
- : SYMBOL
Z0 : INDENTIFIER
- : SYMBOL
9 : NUMBER
ERROR READING ']'
ERROR READING '"'
ERROR READING ','
line : INDENTIFIER
ERROR READING '['
i : INDENTIFIER
ERROR READING ']'
) : SYMBOL
ERROR READING '!'
ERROR READING '='
None : INDENTIFIER
: : SYMBOL

Line:                 newToken.value += line[i]
newToken : INDENTIFIER
ERROR READING '.'
value : INDENTIFIER
+ : SYMBOL
ERROR READING '='
line : INDENTIFIER
ERROR READING '['
i : INDENTIFIER
ERROR READING ']'

Line:                 i += 1
i : INDENTIFIER
+ : SYMBOL
ERROR READING '='
1 : NUMBER

Line:             

Line:             #TODO: send identifier to keywordIdentifier() to check for keyword
ERROR READING '#'
TODO : INDENTIFIER
: : SYMBOL
send : INDENTIFIER
identifier : INDENTIFIER
to : INDENTIFIER
keywordIdentifier : INDENTIFIER
( : SYMBOL
) : SYMBOL
to : INDENTIFIER
check : INDENTIFIER
for : INDENTIFIER
keyword : INDENTIFIER

Line:             

Line:             # print(f"{newToken.value} : {newToken.type}")
ERROR READING '#'
print : INDENTIFIER
( : SYMBOL
f : INDENTIFIER
ERROR READING '"'
ERROR READING '{'
newToken : INDENTIFIER
ERROR READING '.'
value : INDENTIFIER
ERROR READING '}'
: : SYMBOL
ERROR READING '{'
newToken : INDENTIFIER
ERROR READING '.'
type : INDENTIFIER
ERROR READING '}'
ERROR READING '"'
) : SYMBOL

Line:             res.append(newToken)
res : INDENTIFIER
ERROR READING '.'
append : INDENTIFIER
( : SYMBOL
newToken : INDENTIFIER
) : SYMBOL

Line:             continue
continue : INDENTIFIER

Line:         elif(re.match(r"[\+|\-|\*|/|\(|\)|;|:]", line[i]) != None): # Symbols
elif : INDENTIFIER
( : SYMBOL
re : INDENTIFIER
ERROR READING '.'
match : INDENTIFIER
( : SYMBOL
r : INDENTIFIER
ERROR READING '"'
ERROR READING '['
ERROR READING '\'
+ : SYMBOL
| : SYMBOL
ERROR READING '\'
- : SYMBOL
| : SYMBOL
ERROR READING '\'
* : SYMBOL
| : SYMBOL
/ : SYMBOL
| : SYMBOL
ERROR READING '\'
( : SYMBOL
| : SYMBOL
ERROR READING '\'
) : SYMBOL
| : SYMBOL
; : SYMBOL
| : SYMBOL
: : SYMBOL
ERROR READING ']'
ERROR READING '"'
ERROR READING ','
line : INDENTIFIER
ERROR READING '['
i : INDENTIFIER
ERROR READING ']'
) : SYMBOL
ERROR READING '!'
ERROR READING '='
None : INDENTIFIER
) : SYMBOL
: : SYMBOL
ERROR READING '#'
Symbols : INDENTIFIER

Line:             newToken.type = TokenType.SYMBOL
newToken : INDENTIFIER
ERROR READING '.'
type : INDENTIFIER
ERROR READING '='
TokenType : INDENTIFIER
ERROR READING '.'
SYMBOL : INDENTIFIER

Line:             newToken.value = str(line[i])
newToken : INDENTIFIER
ERROR READING '.'
value : INDENTIFIER
ERROR READING '='
str : INDENTIFIER
( : SYMBOL
line : INDENTIFIER
ERROR READING '['
i : INDENTIFIER
ERROR READING ']'
) : SYMBOL

Line:             i += 1
i : INDENTIFIER
+ : SYMBOL
ERROR READING '='
1 : NUMBER

Line:             if (i < len(line) and line[i] == "=" and line[i-1] == ":"):
if : INDENTIFIER
( : SYMBOL
i : INDENTIFIER
ERROR READING '<'
len : INDENTIFIER
( : SYMBOL
line : INDENTIFIER
) : SYMBOL
and : INDENTIFIER
line : INDENTIFIER
ERROR READING '['
i : INDENTIFIER
ERROR READING ']'
ERROR READING '='
ERROR READING '='
ERROR READING '"'
ERROR READING '='
ERROR READING '"'
and : INDENTIFIER
line : INDENTIFIER
ERROR READING '['
i : INDENTIFIER
- : SYMBOL
1 : NUMBER
ERROR READING ']'
ERROR READING '='
ERROR READING '='
ERROR READING '"'
: : SYMBOL
ERROR READING '"'
) : SYMBOL
: : SYMBOL

Line:                 newToken.value += str(line[i])
newToken : INDENTIFIER
ERROR READING '.'
value : INDENTIFIER
+ : SYMBOL
ERROR READING '='
str : INDENTIFIER
( : SYMBOL
line : INDENTIFIER
ERROR READING '['
i : INDENTIFIER
ERROR READING ']'
) : SYMBOL

Line: 

Line:             # print(f"{newToken.value} : {newToken.type}")
ERROR READING '#'
print : INDENTIFIER
( : SYMBOL
f : INDENTIFIER
ERROR READING '"'
ERROR READING '{'
newToken : INDENTIFIER
ERROR READING '.'
value : INDENTIFIER
ERROR READING '}'
: : SYMBOL
ERROR READING '{'
newToken : INDENTIFIER
ERROR READING '.'
type : INDENTIFIER
ERROR READING '}'
ERROR READING '"'
) : SYMBOL

Line:             res.append(newToken)
res : INDENTIFIER
ERROR READING '.'
append : INDENTIFIER
( : SYMBOL
newToken : INDENTIFIER
) : SYMBOL

Line:             continue
continue : INDENTIFIER

Line:         else: # Errors
else : INDENTIFIER
: : SYMBOL
ERROR READING '#'
Errors : INDENTIFIER

Line:             newToken.value = str(line[i])
newToken : INDENTIFIER
ERROR READING '.'
value : INDENTIFIER
ERROR READING '='
str : INDENTIFIER
( : SYMBOL
line : INDENTIFIER
ERROR READING '['
i : INDENTIFIER
ERROR READING ']'
) : SYMBOL

Line:             i += 1
i : INDENTIFIER
+ : SYMBOL
ERROR READING '='
1 : NUMBER

Line:             # print(f"{newToken.value} : {newToken.type}")
ERROR READING '#'
print : INDENTIFIER
( : SYMBOL
f : INDENTIFIER
ERROR READING '"'
ERROR READING '{'
newToken : INDENTIFIER
ERROR READING '.'
value : INDENTIFIER
ERROR READING '}'
: : SYMBOL
ERROR READING '{'
newToken : INDENTIFIER
ERROR READING '.'
type : INDENTIFIER
ERROR READING '}'
ERROR READING '"'
) : SYMBOL

Line:             res.append(newToken)
res : INDENTIFIER
ERROR READING '.'
append : INDENTIFIER
( : SYMBOL
newToken : INDENTIFIER
) : SYMBOL

Line:             continue
continue : INDENTIFIER

Line:     return res
return : INDENTIFIER
res : INDENTIFIER

Line:             

Line: 

Line: def main(input, output):
def : INDENTIFIER
main : INDENTIFIER
( : SYMBOL
input : INDENTIFIER
ERROR READING ','
output : INDENTIFIER
) : SYMBOL
: : SYMBOL

Line:     tokens = list()
tokens : INDENTIFIER
ERROR READING '='
list : INDENTIFIER
( : SYMBOL
) : SYMBOL

Line: 

Line:     for line in input:
for : INDENTIFIER
line : INDENTIFIER
in : INDENTIFIER
input : INDENTIFIER
: : SYMBOL

Line:         output.write("Line: " + line.strip('\n') + "\n")
output : INDENTIFIER
ERROR READING '.'
write : INDENTIFIER
( : SYMBOL
ERROR READING '"'
Line : INDENTIFIER
: : SYMBOL
ERROR READING '"'
+ : SYMBOL
line : INDENTIFIER
ERROR READING '.'
strip : INDENTIFIER
( : SYMBOL
ERROR READING '''
ERROR READING '\'
n : INDENTIFIER
ERROR READING '''
) : SYMBOL
+ : SYMBOL
ERROR READING '"'
ERROR READING '\'
n : INDENTIFIER
ERROR READING '"'
) : SYMBOL

Line:         tokens = getTokens(line)
tokens : INDENTIFIER
ERROR READING '='
getTokens : INDENTIFIER
( : SYMBOL
line : INDENTIFIER
) : SYMBOL

Line:         for token in tokens:
for : INDENTIFIER
token : INDENTIFIER
in : INDENTIFIER
tokens : INDENTIFIER
: : SYMBOL

Line:             if token.type == TokenType.ERROR:
if : INDENTIFIER
token : INDENTIFIER
ERROR READING '.'
type : INDENTIFIER
ERROR READING '='
ERROR READING '='
TokenType : INDENTIFIER
ERROR READING '.'
ERROR : INDENTIFIER
: : SYMBOL

Line:                 output.write(f"ERROR READING '{token.value}'\n")
output : INDENTIFIER
ERROR READING '.'
write : INDENTIFIER
( : SYMBOL
f : INDENTIFIER
ERROR READING '"'
ERROR : INDENTIFIER
READING : INDENTIFIER
ERROR READING '''
ERROR READING '{'
token : INDENTIFIER
ERROR READING '.'
value : INDENTIFIER
ERROR READING '}'
ERROR READING '''
ERROR READING '\'
n : INDENTIFIER
ERROR READING '"'
) : SYMBOL

Line:                 continue
continue : INDENTIFIER

Line:             output.write(f"{token.value} : {TokenType.toString(token.type)}\n")
output : INDENTIFIER
ERROR READING '.'
write : INDENTIFIER
( : SYMBOL
f : INDENTIFIER
ERROR READING '"'
ERROR READING '{'
token : INDENTIFIER
ERROR READING '.'
value : INDENTIFIER
ERROR READING '}'
: : SYMBOL
ERROR READING '{'
TokenType : INDENTIFIER
ERROR READING '.'
toString : INDENTIFIER
( : SYMBOL
token : INDENTIFIER
ERROR READING '.'
type : INDENTIFIER
) : SYMBOL
ERROR READING '}'
ERROR READING '\'
n : INDENTIFIER
ERROR READING '"'
) : SYMBOL

Line:         output.write("\n")
output : INDENTIFIER
ERROR READING '.'
write : INDENTIFIER
( : SYMBOL
ERROR READING '"'
ERROR READING '\'
n : INDENTIFIER
ERROR READING '"'
) : SYMBOL

Line:         

Line:             

Line:     input.close()
input : INDENTIFIER
ERROR READING '.'
close : INDENTIFIER
( : SYMBOL
) : SYMBOL

Line:     output.close()
output : INDENTIFIER
ERROR READING '.'
close : INDENTIFIER
( : SYMBOL
) : SYMBOL

Line:         

Line: 

Line: ArgParser()
ArgParser : INDENTIFIER
( : SYMBOL
) : SYMBOL

